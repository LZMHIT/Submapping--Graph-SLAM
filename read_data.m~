clear all;
close all;

import gtsam.*

data_file = fopen('input_INTEL_g2o.g2o');
input_line = fgetl(data_file);

%% Create graph container and add factors to it
graph = NonlinearFactorGraph;
initialEstimate = Values;

%% Add prior
priorNoise = noiseModel.Diagonal.Sigmas([0.3; 0.3; 0.1]);
graph.add(PriorFactorPose2(1, Pose2(0, 0, 0), priorNoise)); % add directly to graph

while ischar(input_line)
    %disp(input_line)
    split_line = strsplit(input_line);
    
    %% ADD VERTICES TO GRAPH - INITIAL ESTIMATE%%
    if (strcmp(split_line{1},'VERTEX_SE2'))
        vertex_id = str2num(split_line{2});
        vertex_location = ([str2num(split_line{3}),str2num(split_line{4}),str2num(split_line{5})]);
        x = vertex_location(1);
        y = vertex_location(2);
        theta = vertex_location(3);
        initialEstimate.insert(vertex_id, Pose2(x,y,theta));
    end
    
    %% ADD EDGES TO GRAPH - ODOMETRY AND POSE CONTRAINTS %%
    if (strcmp(split_line{1},'EDGE_SE2'))
        vertex_id_1 = str2num(split_line{2});
        vertex_id_2 = str2num(split_line{3});
        odometry = ([str2num(split_line{4}),str2num(split_line{5}),str2num(split_line{6})]);
        dx = odometry(1);
        dy = odometry(2);
        dtheta = odometry(3);
 
        information_matrix(1,1)= str2num(split_line{7});
        information_matrix(1,2)= str2num(split_line{8});
        information_matrix(1,3)= str2num(split_line{9});
        information_matrix(2,1)= str2num(split_line{8});
        information_matrix(2,2)= str2num(split_line{10});
        information_matrix(2,3)= str2num(split_line{11});
        information_matrix(3,1)= str2num(split_line{9});
        information_matrix(3,2)= str2num(split_line{11});
        information_matrix(3,3)= str2num(split_line{12});
        
        chol_information_matrix = sqrtm(information_matrix);

        model = noiseModel.Gaussian.SqrtInformation(chol_information_matrix);
        graph.add(BetweenFactorPose2(vertex_id_1, vertex_id_2, Pose2(dx, dy, dtheta), model));
    end
    
    input_line = fgetl(data_file);
    
end

fclose(data_file);

graph.print(sprintf('\nFactor graph:\n'));

%% Optimize using Levenberg-Marquardt optimization with an ordering from colamd
%optimizer = LevenbergMarquardtOptimizer(graph, initialEstimate);
%result = optimizer.optimizeSafely();
%result.print(sprintf('\nFinal result:\n'));

parameters = DoglegParams();

% Stop iterating once the change in error between steps is less than this value
parameters.setRelativeErrorTol(1e-5);
% Do not perform more than N iteration steps
parameters.setMaxIterations(100);
% Create the optimizer ...
optimizer = gtsam.NonlinearOptimizer(graph, initialEstimate, parameters);
% and optimize
result = optimizer.optimizeSafely();
result.print(sprintf('\nFinal result:\n'));

%% Plot Covariance Ellipses
cla;
hold on
plot([result.at(5).x;result.at(2).x],[result.at(5).y;result.at(2).y],'r-');
% marginals = Marginals(graph, result);

% plot2DTrajectory(result, [], marginals);
plot2DTrajectory(result);
% for i=1:5,marginals.marginalCovariance(i),end
axis equal
axis tight
view(2)

